[% start_year=2021 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/Trav-Dir-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% MACRO since(version) BLOCK -%]
This method was added in version [% version %] of the module.
[%- END %]
=encoding UTF-8

=head1 NAME

[% info.colon %] - Traverse directories

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents version [% info.version %] of [% info.name %]
corresponding to L<git commit [% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

Traverse directory structure. Replacement for L</File::Find>.

=head1 METHODS

=head2 find_files

    $o->find_files ($dir, \@files);

Traverse C<$dir> and its subdirectories and make a list of files. The
found files are put into C<@files>. File names are fully
qualified. You can omit the second argument if you want to use a
L</callback> instead. If both the callback and the files argument are
omitted, C<find_files> prints a warning and returns, since there is
nothing to do.

Symbolic links (files which return a true value with the -l test) are
always skipped.

=head2 new

    my $o = Trav::Dir->new (%options);

The options are as follows:

=over

=item callback

    Trav::Dir->new (callback => \& call_me);

Callback when file is found. Can be undefined. It is called like this

    &callback ($data, $file);

Here C<$file> is the full path of the file and C<$data> is the data
you pass with L</data>. Directories are also sent to your callback. If
you don't want directories, use the L</no_dir> option.

=item data

    Trav::Dir->new (data => \%my_structure);

A data item to pass to callbacks. See L</callback> and L</preprocess>
for the calling conventions.

=item maxsize

    Trav::Dir->new (maxsize => 100_000_000);

Maximum file size to consider. If left undefined it is not used. If
defined, if the file under consideration is bigger than this, the file
is skipped. This test is not applied to directories.

=item minsize

    Trav::Dir->new (minsize => 100_000_000);

Minimum file size to consider. If left undefined it is not used. If
defined, if the file under consideration is smaller than this, the
file is skipped. This test is not applied to directories.

=item no_dir

    Trav::Dir->new (no_dir => 1);

Don't include directories in the results sent to L</callback> or
included in C<@files>.

=item no_trav

    Trav::Dir->new (no_trav => qr!\.git\b!);

Regex to reject directories to traverse. If a directory matches this
regex, it is not traversed at all, and its subdirectories are not
traversed or even seen.

=item only

    Trav::Dir->new (only => qr!.*\.html$!);

Regex to accept only files which match it. 

For example the following script finds files called C<hanzierrorlog>
under a directory C</mount/backup/incremental/2019>, and then removes
them when they are found with a callback named C<found>:

    my $td = Trav::Dir->new (
        only => qr!hanzierrorlog!,
        callback => \& found,
    );
    $td->find_files ('/mount/backup/incremental/2019');
    sub found
    {
        my (undef, $file) = @_;
        unlink $file or warn "Failed to unlink $file: $!";
    }

=item preprocess

    Trav::Dir->new (preprocess => \& my_function);

A function which preprocesses a list of files. It is called in the form

     preprocess ($data, $dir, \@files);

where C<$data> is what is specified with L</data>, C<$dir> is the
directory of the files, and C<@files> is the list of files in that
directory.

=item rejfile

    Trav::Dir->new (rejfile => qr!~$!);

Regex to reject files which don't match it. If a file matches this
regex it is never sent to the callback specified with L</callback>.

=back

=head1 SEE ALSO

=over

=item L<File::chdir::WalkDir>

=item L<File::Find>

This is a Perl version of the Unix "find" utility. It is part of the
Perl core so is installed with Perl by default. 

Trav::Dir was created as an alternative to this with the following
merits:

=over

=item No need for closures or global variables

Trav::Dir eliminates the need for closures or global variables by
allowing the user to supply a L</data> argument to L</new>.

=item No pseudo-global variables

File::Find communicates with the user routine it calls C<wanted> using
various pseudo-global variables like C<$File::Find::name>. Trav::Dir
uses standard Perl subroutine arguments in callbacks. See L</callback>
and L</preprocess>.

=item Pattern-matching

File::Find has no facility to match directories or files against
patterns.  Instead each and every directory and file must be handled
by a user callback, and the user callback must interact with
File::Find using lengthy fully-qualified arguments like
C<$File::Find::prune>.

Trav::Dir greatly simplifies the selection of files by allowing regex
arguments like L</no_trav>, L</only> and L</rejfile> to sort through
directories and file names.

=item Documentation

File::Find has various more or less serious problems with its
documentation, including wrong statements, undocumented variables like
C<$File::Find::prune>, and more or less humorous oddities like
insisting on calling the user callback C<wanted> and then writing that
the subroutine is misnamed, or having both a CAVEAT section containing
two caveats, followed by a BUGS AND CAVEATS section containing only
one caveat, and no bugs. I've reported some of them to the Perl bug
list. I've also submitted a pull request to correct some of the
problems. Please see there for details if you would like to
contribute.

=back

=item L<File::Find::Object>

=item L<File::Find::Rule>

"Alternative interface to File::Find"

=item L<File::Finder>

=item L<File::Next>

=item L<Path::Class::Iterator>

=item L<Path::Class::Rule>

=item L<Path::Iterator::Rule>

=back

[% INCLUDE "author" %]
