[% start_year=2021 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/Trav-Dir-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% MACRO since(version) BLOCK -%]
This method was added in version [% version %] of the module.
[%- END %]
=encoding UTF-8

=head1 NAME

[% info.colon %] - Traverse directories

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents version [% info.version %] of [% info.name %]
corresponding to L<git commit [% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

Traverse directory structure. Replacement for L</File::Find>.

=head1 METHODS

=head2 find_files

    $o->find_files ($dir, \@files);

=head2 new

    my $o = Trav::Dir->new (%options);

=over

=item callback

Callback when file is found. Can be undefined.

    &callback ($data, $file);

Here $file is the full path of the file.

=item maxsize

Maximum file size to consider.

=item minsize

Minimum file size to consider.

=item no_dir

Don't include directories in the results.

=item no_trav

Regex to reject directories to traverse.

=item preprocess

Regex to preprocess a list of files.

=item only

Regex to accept only files which match it.

=item rejfile

Regex to reject files which don't match it.

=back

=head1 SEE ALSO

=over

=item L<File::Find>

This is a Perl version of the Unix "find" utility. It is part of the
Perl core so is installed with Perl by default. 

File::Find was rejected from the Acme:: namespace for being too
absurd.

Instead of passing variables to callbacks as subroutine arguments, it
passes them using C<$_> and oddly-named pseudo-global variables like
C<$File::Find::dir> and C<$File::Find::name>. Callbacks have no avenue
for passing user-defined data, so one has to either use global
variables or anonymous subroutine closures. 

The module's documentation also notes that it has given things the
wrong name, within the documentation: "Note that despite its name, the
wanted() function is a generic callback function, and does not tell
File::Find if a file is "wanted" or not. In fact, its return value is
ignored." Since the author of the documentation has chosen to give the
subroutine the name "wanted", it is interesting that he or she notes
that the name is completely incorrect.

For added fun, File::Find's documentation has a section "WARNINGS", a
section "CAVEAT" (a word which means "warning"), and then a section
"BUGS AND CAVEATS", which contains the following: "Despite the name of
the finddepth() function, both find() and finddepth() perform a
depth-first search of the directory hierarchy". It seems unlikely that
there is a person other than the author of this documentation who
understands what on earth he or she was trying to convey by this
statement.

I have used File::Find to traverse directories, but found it
exceedingly annoying, and ended up writing various scripts to traverse
directory trees instead. I started this module from one of the scripts
I had written a few years ago. After writing this module, I then went
back and replaced all the uses of File::Find with this, so there are
some similarities.

=back

[% INCLUDE "author" %]
