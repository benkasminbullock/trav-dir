[% start_year=2021 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/Trav-Dir-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% MACRO since(version) BLOCK -%]
This method was added in version [% version %] of the module.
[%- END %]
=encoding UTF-8

=head1 NAME

[% info.colon %] - Traverse directories

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents version [% info.version %] of [% info.name %]
corresponding to L<git commit [% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

Traverse directories and make a list of files. Replacement for
L</File::Find>.

=head1 METHODS

=head2 find_files

    $o->find_files ($dir, \@files);

Traverse C<$dir> and its subdirectories, and list all the files found
into C<@files>. File names are fully qualified, in other words the
file names in C<@files> include the file's directory. 

You can omit the second argument and use a L</callback> instead. 

    my $o = Trav::Dir->new (callback => \& my_function);
    $o->find_files ($dir);

See L</callback>.

The list of files C<@files> is deliberately not made a return value so
that you can run C<find_files> over a list of directories.

    for my $dir (@dirs) {
        $td->find_files ($dir, \@files);
    }

New files are added to the end of C<@files> using C<push>.

If both C<callback> and C<@files> are omitted, C<find_files> prints a
warning and returns, since there is nothing to do. You might see this
warning if you accidentally omit the slash before C<@files> like this:

[% example("forgot-slash") %]

Symbolic links (files which return a true value with the -l test) are
not traversed.

"find_files" was originally the name of a subroutine in the script
which became Trav::Dir.

=head2 new

    my $o = Trav::Dir->new (%options);

Create a new Trav::Dir object. There are no mandatory options. The
options are as follows:

=over

=item callback

    Trav::Dir->new (callback => \& call_me);

A subroutine to call back when each file is found, similar to the
C<wanted> routine of L</File::Find>. It is called like this

    &callback ($data, $file);

Here C<$file> is the full path of the file and C<$data> is the data
you pass with L</data>. 

Directories are also sent to your callback. If you don't want
directories, use the L</no_dir> option.

=item data

    Trav::Dir->new (data => \%my_structure);

A data item to pass to callbacks. See L</callback> and L</preprocess>
for the calling conventions.

=item maxsize

    Trav::Dir->new (maxsize => 100_000_000);

Maximum file size to consider. If left undefined it is not used. If
defined, if the file under consideration is bigger than this, the file
is skipped. This test is not applied to directories.

This option was implemented to assist file search indexing by
rejecting very large files.

=item minsize

    Trav::Dir->new (minsize => 100_000_000);

Minimum file size to consider. If left undefined it is not used. If
defined, if the file under consideration is smaller than this, the
file is skipped. This test is not applied to directories.

This option was implemented to assist a file search indexing program
by rejecting very small files.

=item no_dir

    Trav::Dir->new (no_dir => 1);

Don't include directories in the results sent to L</callback> or
included in C<@files>.

This option was implemented to assist a file search indexing program
by rejecting directories.

=item no_trav

    Trav::Dir->new (no_trav => qr!\.git\b!);

Regex to reject directories to traverse. If a directory matches this
regex, it is not traversed at all, and its subdirectories are not
traversed or even seen.

This option was implemented for an incremental backup system to stop
going into directories containing files which didn't need to be backed
up, and a file search indexing system for stopping going into
directories containing files which don't need to be indexed, such as
computer-generated HTML files or old web server log files.

=item only

    Trav::Dir->new (only => qr!.*\.html$!);

Regex to accept only files which match it. 

This option was implemented to assist searching for certain types of
file.

For example the following script finds files called C<hanzierrorlog>
under a directory C</mount/backup/incremental/2019>, and then removes
them when they are found with a callback named C<found>:

    my $td = Trav::Dir->new (
        only => qr!hanzierrorlog!,
        callback => \& found,
    );
    $td->find_files ('/mount/backup/incremental/2019');
    sub found
    {
        my (undef, $file) = @_;
        unlink $file or warn "Failed to unlink $file: $!";
    }

=item preprocess

    Trav::Dir->new (preprocess => \& my_function);

A function which preprocesses the list of files of a directory. It is
called in the form

    preprocess ($data, $dir, \@files);

where C<$data> is what is specified with L</data>, C<$dir> is the
directory of the files, and C<@files> is the list of files in that
directory.

Trav::Dir does not call C<chdir>, but the file names in C<@files> are
not qualified, that is they do not contain the directory of the file,
C<$dir>.

To alter what files are processed, alter the reference you get,
e.g. to stop processing of the directory use

    @$files = ();

This may change in a future version of the module.

This option was implemented as a substitute for the C<preprocess>
method of L</File::Find> when I replaced its use by use of Trav::Dir,
for an incremental backup system, to prevent the backup system going
into directories flagged not to be backed up.

=item rejfile

    Trav::Dir->new (rejfile => qr!~$!);

Regex for rejecting files. If a file matches this regex it is never
sent to the callback specified with L</callback>.

This was implemented for things such as the above example, where C<~>
is the character used by Emacs editor backups, to prevent old editor
backup files from being indexed by a search system.

=item verbose

    Trav::Dir->new (verbose => 1);

Print a lot of messages about how the files are being processed.

=back

=head1 SEE ALSO

=head2 CPAN

There are a number of other CPAN modules for going into directories
and making a list of files.

=over

=item L<File::Find>

This is a Perl version of the Unix "find" utility. It is part of the
Perl core so is installed with Perl by default. 

=back

=over

=item Alternatives to File::Find

These modules offer alternatives to File::Find but are not based on it.

=over

=item L<File::chdir::WalkDir>

=item L<File::Find::Declare>

Moose-based

=item L<File::Find::Node>

"Object oriented directory tree traverser"

=item L<File::Find::Object>

"An object oriented File::Find replacement"

=item L<File::Next>

=item L<Path::Class::Iterator>

"walk a directory structure"

=item L<Path::Class::Rule>

"Iterative, recursive file finder with Path::Class"

=item L<Path::Iterator::Rule>

=back

=item File::Find extensions

These extend L</File::Find> in various ways.

=over

=item L<File::Find::CaseCollide>

"find collisions in filenames, differing only in case"

=item L<File::Find::Duplicates>

=item L<File::Find::Rex>

"Combines simpler File::Find interface with support for regular
expression search criteria."

=item L<File::Find::Rule>

"Alternative interface to File::Find"

It features very comprehensive tests for different kinds of files
which you can chain together to get lists of files.

=item L<File::Find::utf8>

"Fully UTF-8 aware File::Find"

It forces the file names from bytes to characters.

=back

=item File::Find assistants

These help you to use L</File::Find>.

=over

=item L<File::Find::Closures>

"functions you can use with File::Find"

=item L<File::Finder>

"nice wrapper for File::Find ala find" 

It writes C<wanted> subroutines for File::Find.

=item L<File::Find::Wanted>

"More obvious wrapper around File::Find"

=back

=item Other

=over

=item L<File::Find::Match>

"Perform different actions on files based on file name."

=item L<File::Find::Random>

The documentation doesn't make it very clear what this does.

=back

=back

=head1 HISTORY

Trav::Dir was created as an alternative to L</File::Find> with the
following merits:

=over

=item No need for closures or global variables

Trav::Dir eliminates the need for closures or global variables by
allowing the user to supply a L</data> argument to L</new>.

=item No pseudo-global variables

File::Find communicates with the user routine it calls C<wanted> using
various pseudo-global variables like C<$File::Find::name>. Trav::Dir
uses standard Perl subroutine arguments in callbacks. See L</callback>
and L</preprocess>.

=item Pattern-matching

File::Find has no facility to match directories or files against
patterns.  Instead each and every directory and file must be handled
by a user callback, and the user callback must interact with
File::Find using lengthy fully-qualified arguments like
C<$File::Find::prune>.

Trav::Dir greatly simplifies the selection of files by allowing regex
arguments like L</no_trav>, L</only> and L</rejfile> to sort through
directories and file names.

=item Documentation

File::Find has problems with its documentation including wrong
statements, undocumented variables like C<$File::Find::prune>, and
oddities like calling the user callback C<wanted> and then writing
that the subroutine is misnamed, or having both a CAVEAT section
containing two caveats, followed by a BUGS AND CAVEATS section
containing only one caveat, and no bugs. 

I've reported some of them to the Perl bug list. I've also submitted a
pull request to correct some of the problems. Please see there for
details if you would like to contribute.

=item Does not call chdir

Trav::Dir does not call chdir. All returned file names are
fully-qualified.

=back

Prior to creating this module I was regularly using L</File::Find> and
I had also used L</File::Find::Rule>, as well as using code such as

    my $pm = `find . -name *.pm`;
    my @pm = split /\n/, $pm;

The bulk of Trav::Dir's code was taken from scripts written as an
alternative to either File::Find and friends or the above kinds of
things. The scripts had been in use for several years in various
places. The random-looking names of the options to L</new> are just
the names from the old scripts.

Since starting this module in February 2021, I've been able to replace
all uses of File::Find, backticks, and the other scripts, with
Trav::Dir.

[% INCLUDE "author" %]
